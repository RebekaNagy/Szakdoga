module Test where

import Test.Hspec
import Preparation
import Parser
import Checking
import System.IO
import System.IO.Unsafe
import System.Environment
import Test.QuickCheck
import Control.Exception (evaluate)

main :: IO ()
main = hspec $ do
    describe "Tesztelés\n" $ do
        describe "Parser.hs tesztelései\n" $ do
            it "parseString müködése test1.p4 esetén, mely szintaktikailag helyes" $ do
                parseString (files!!0) `shouldBe` parsed1
            it "parseString müködése test2.p4 esetén, mely szintaktikailag helyes" $ do
                parseString (files!!1) `shouldBe` parsed2
            it "parseString müködése test3.p4 esetén, mely szintaktikailag helyes" $ do
                parseString (files!!2) `shouldBe` parsed3
            it "parseString müködése test4.p4 esetén, mely szintaktikailag hibás\n" $ do
                parseString (files!!3) `shouldBe` parsed4
            
        describe "Preparation.hs tesztelései\n" $ do
            it "Fejlécek átalakítása" $ do
                headerConversion (head headerStatement) (testInitEnv, testFinalEnv) `shouldBe` ([Env [("drop",(Invalid,[])),("ethernet_t",(Invalid,[("dstAddr",Invalid),("srcAddr",Invalid),("etherType",Invalid)]))]],Env [("drop",(Invalid,[])),("ethernet_t",(Undefined,[("dstAddr",Undefined),("srcAddr",Undefined),("etherType",Undefined)]))])
            it "Parser átalakítása" $ do
                parserConversion parserStatement testInitEnvFull `shouldBe` [Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))],Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Invalid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]]
            it "Parser nem tartalmaz 'start' state-et" $ do
                parserConversion parserWithoutStartStatement testInitEnvFull `shouldBe` [EnvError]
            it "State-ben lévö transitionban szereplö fejlécnév hibás" $ do
                parserConversion parserWithIncorrectHeaderStatement testInitEnvFull `shouldBe` [EnvError]
            it "Control átalakítása" $ do
                controlConversion controlStatement ((testInitEnvFull, testFinalEnv),(testActions, testTables, testProg)) `shouldBe` (([Env [("drop",(Invalid,[])),("ethernet",(Invalid,[("ethernet.dstAddr",Invalid),("ethernet.srcAddr",Invalid),("ethernet.etherType",Invalid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Invalid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]],Env [("drop",(Invalid,[]))]),([Action "mydrop" (Seq Drop Skip),Action "ipv4_ch" (Seq (Assignment "ethernet.srcAddr" []) (Seq (Assignment "ethernet.dstAddr" []) (Seq (Assignment "ipv4.ttl" []) (Seq (SetHeaderValidity "ipv4" Invalid) Skip)))),Action "my_drop" (Seq Drop Skip),Action "rewrite_mac" (Seq (Assignment "ethernet.srcAddr" [""]) Skip)],[Table "ipv4_lpm" ["ipv4.dstAddr"] [Action "ipv4_ch" (Seq (Assignment "ethernet.srcAddr" []) (Seq (Assignment "ethernet.dstAddr" []) (Seq (Assignment "ipv4.ttl" []) (Seq (SetHeaderValidity "ipv4" Invalid) Skip)))),Action "mydrop" (Seq Drop Skip),Action "NoAction" Skip],Table "send_frame" ["ethernet.dstAddr"] [Action "rewrite_mac" (Seq (Assignment "ethernet.srcAddr" [""]) Skip),Action "my_drop" (Seq Drop Skip)]],[Seq (If ["ipv4"] (Seq (Table "ipv4_lpm" ["ipv4.dstAddr"] [Action "ipv4_ch" (Seq (Assignment "ethernet.srcAddr" []) (Seq (Assignment "ethernet.dstAddr" []) (Seq (Assignment "ipv4.ttl" []) (Seq (SetHeaderValidity "ipv4" Invalid) Skip)))),Action "mydrop" (Seq Drop Skip),Action "NoAction" Skip]) Skip) Skip) (Seq Skip Skip)]))
            it "Deparser átalakítása" $ do
                emitConversion emitStatement testFinalEnvFull `shouldBe` Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]
            it "Deparser-ben szereplö feljécnév hibás" $ do
                emitConversion emitWithIncorrectHeaderStatement testFinalEnvFull `shouldBe` EnvError
            it "Mellékfeltételek átalakítása" $ do
                map sideConditionConversion testStrSideCons `shouldBe` [SideCon ([None,None],[None,None],[None,None,None,None],[None,None],[None,None,None]),SideCon ([Valid,Valid],[Valid,Valid],[Valid,Valid,Valid,Valid],[Valid,Valid],[Valid,Valid,Valid]),SideCon ([Invalid,Invalid],[Invalid,Invalid],[Invalid,Invalid,Invalid,Invalid],[Invalid,Invalid],[Invalid,Invalid,Invalid]),SideCon ([Valid,Valid],[None,None],[None,Invalid,None,Valid],[Invalid,Valid],[Valid,Invalid,None])]
            it "Mellékfeltételek átalakítása hibás bemenet esetén" $ do
                map sideConditionConversion testStrIncorrectSideCons `shouldBe` [SideCondError,SideCondError,SideCondError,SideCondError]
            it "Fö átalakító függvény müködése\n" $ do
                (mainConversion (parseString (files!!0)) ((testInitEnv, testFinalEnv), (testActions, testTables, testProg))) `shouldBe` (([("0",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))])],[Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))],Env [("drop",(Valid,[])),("ethernet",(Undefined,[("ethernet.dstAddr",Undefined),("ethernet.srcAddr",Undefined),("ethernet.etherType",Undefined)])),("ipv4",(Undefined,[("ipv4.ttl",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]]),Seq (Table "ipv4_lpm" ["ipv4.dstAddr"] [Action "ipv4_ch" (Seq (Assignment "ethernet.srcAddr" []) (Seq (Assignment "ethernet.dstAddr" []) (Seq (Assignment "ipv4.ttl" []) (Seq (SetHeaderValidity "ipv4" Invalid) Skip)))),Action "mydrop" (Seq Drop Skip),Action "NoAction" Skip]) Skip)
                
        describe "Checking.hs tesztelései\n" $ do
            it "prFunc_Skip müködése" $ do
                prFunc_Skip testIdEnv `shouldBe` [("0",Match,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            
            it "prFunc_Action müködése" $ do
                prFunc_Action testIdEnv "ipv4_ch" (SetHeaderValidity "ipv4" Invalid) testWithNonesSideCons 0 `shouldBe` [("0$0action:ipv4_ch$1setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0action:ipv4_ch$1setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]

            it "prFunc_Drop müködése mellékfeltétel nélkül" $ do
                prFunc_Drop testIdEnv testWithNonesSideCons 0 `shouldBe` [("0$0drop",NoMatch,Env [("drop",(Valid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0drop",NoMatch,Env [("drop",(Valid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_Drop müködése Valid mellékfeltétellel" $ do
                prFunc_Drop testIdEnv testWithValidsSideCons 0 `shouldBe` [("0",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_Drop müködése Invalid mellékfeltétellel\n" $ do
                prFunc_Drop testIdEnv testWithInvalidsSideCons 0 `shouldBe` [("0$0drop",NoMatch,Env [("drop",(Valid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]

            it "prFunc_SetHeaderValidity müködese mellékfeltétel nélkül" $ do
                prFunc_SetHeaderValidity testIdEnv "ipv4" Valid testWithNonesSideCons 0 `shouldBe` [("0$0setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_SetHeaderValidity müködése Valid mellékfeltétellel" $ do
                prFunc_SetHeaderValidity testIdEnv "ipv4" Valid testWithValidsSideCons 0 `shouldBe` [("0",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_SetHeaderValidity müködése Invalid mellékfeltétellel\n" $ do
                prFunc_SetHeaderValidity testIdEnv "ipv4" Valid testWithInvalidsSideCons 0 `shouldBe` [("0$0setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]

            it "prFunc_Assignment müködése mellékfeltétel nélkül" $ do
                prFunc_Assignment testIdEnv "ethernet.srcAddr" ["ipv4.ttl"] testWithNonesSideCons 0 `shouldBe` [("0$0assignment:ethernet.srcAddr",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0assignment:ethernet.srcAddr",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_Assignment müködése Valid mellékfeltétellel" $ do
                prFunc_Assignment testIdEnv "ethernet.srcAddr" ["ipv4.ttl"] testWithValidsSideCons 0 `shouldBe` [("0",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0assignment:ethernet.srcAddr",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_Assignment müködése Invalid mellékfeltétellel\n" $ do
                prFunc_Assignment testIdEnv "ethernet.srcAddr" ["ipv4.ttl"] testWithInvalidsSideCons 0 `shouldBe`[("0$0assignment:ethernet.srcAddr",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]

            it "prFunc_If müködése mellékfeltétel nélkül" $ do
                prFunc_If testIdEnv ["ethernet.srcAddr", "ipv4"] Skip Skip testWithNonesSideCons 0 `shouldBe` [("0$0if",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0if",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0else",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0else",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_If müködése Valid mellékfeltétellel" $ do
                prFunc_If testIdEnv ["ethernet.srcAddr", "ipv4"] Skip Skip testWithValidsSideCons 0 `shouldBe` [("0",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0if",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("1$0else",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_If müködése Invalid mellékfeltétellel\n" $ do
                prFunc_If testIdEnv ["ethernet.srcAddr", "ipv4"] Skip Skip testWithInvalidsSideCons 0 `shouldBe` [("1",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0if",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("0$0else",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))])]

            it "prFunc_Table müködése mellékfeltétel nélkül" $ do
                prFunc_Table testIdEnv "ipv4_lpm" ["ethernet.srcAddr", "ipv4"] testActionsFull testWithNonesSideCons 0 `shouldBe` [("0$0table:ipv4_lpm$0action:ipv4_ch$1assignment:ethernet.srcAddr$101assignment:ethernet.dstAddr$201assignment:ipv4.ttl$301setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0table:ipv4_lpm$0action:ipv4_ch$1assignment:ethernet.srcAddr$101assignment:ethernet.dstAddr$201assignment:ipv4.ttl$301setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0table:ipv4_lpm$0action:mydrop$1drop",NoMatch,Env [("drop",(Valid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0table:ipv4_lpm$0action:mydrop$1drop",NoMatch,Env [("drop",(Valid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0table:ipv4_lpm$0action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0table:ipv4_lpm$0action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_Table müködése Valid mellékfeltétellel" $ do
                prFunc_Table testIdEnv "ipv4_lpm" ["ethernet.srcAddr", "ipv4"] testActionsFull testWithValidsSideCons 0 `shouldBe` [("0",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0table:ipv4_lpm$0action:ipv4_ch$1assignment:ethernet.srcAddr$101assignment:ethernet.dstAddr$201assignment:ipv4.ttl$301setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("1$0table:ipv4_lpm$0action:mydrop",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("1$0table:ipv4_lpm$0action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_Table müködése Invalid mellékfeltétellel\n" $ do
                prFunc_Table testIdEnv "ipv4_lpm" ["ethernet.srcAddr", "ipv4"] testActionsFull testWithInvalidsSideCons 0 `shouldBe` [("1",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0table:ipv4_lpm$0action:ipv4_ch$1assignment:ethernet.srcAddr$101assignment:ethernet.dstAddr$201assignment:ipv4.ttl$301setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("0$0table:ipv4_lpm$0action:mydrop$1drop",NoMatch,Env [("drop",(Valid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("0$0table:ipv4_lpm$0action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))])]

            it "prFunc_Seq müködése struktúrák mellékfeltétei nélkül" $ do
                prFunc_Seq testIdEnv (SetHeaderValidity "ipv4" Invalid) (Assignment "ethernet.srcAddr" ["ipv4.ttl"]) testWithNonesSideCons 0 `shouldBe` [("0$0setHeader:ipv4$100assignment:ethernet.srcAddr",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0setHeader:ipv4$100assignment:ethernet.srcAddr",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_Seq müködése struktúrák Valid mellékfeltételeivel" $ do
                prFunc_Seq testIdEnv (SetHeaderValidity "ipv4" Invalid) (Assignment "ethernet.srcAddr" ["ipv4.ttl"]) testWithValidsSideCons 0 `shouldBe` [("0",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0setHeader:ipv4",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "prFunc_Seq müködése struktúrák Invalid mellékfeltételeivel\n" $ do
                prFunc_Seq testIdEnv (SetHeaderValidity "ipv4" Invalid) (Assignment "ethernet.srcAddr" ["ipv4.ttl"]) testWithInvalidsSideCons 0 `shouldBe`[("1",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0setHeader:ipv4$100assignment:ethernet.srcAddr",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))])]

            it "checkP4 müködése struktúrák mellékfeltétei nélkül" $ do
                checkP4 testIdEnv testProgFull testWithNonesSideCons 0 `shouldBe` [("0$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$311setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$311setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0if$10table:ipv4_lpm$10action:mydrop$11drop",NoMatch,Env [("drop",(Valid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0if$10table:ipv4_lpm$10action:mydrop$11drop",NoMatch,Env [("drop",(Valid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0if$10table:ipv4_lpm$10action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0if$10table:ipv4_lpm$10action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0else",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0else",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "checkP4 müködése struktúrák Valid mellékfeltételeivel" $ do
                checkP4 testIdEnv testProgFull testWithValidsSideCons 0 `shouldBe` [("0",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("1$0if$10table:ipv4_lpm$10action:mydrop",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$311setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("1$0else",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))])]
            it "checkP4 müködése struktúrák Invalid mellékfeltételeivel\n" $ do
                checkP4 testIdEnv testProgFull testWithInvalidsSideCons 0 `shouldBe` [("1",Stuck,Env [("drop",(Invalid,[])),("ipv4",(Valid,[("ipv4.dstAddr",Valid),("ipv4.srcAddr",Valid)])),("ethernet",(Valid,[("ethernet.field1",Valid),("ethernet.field2",Valid)]))]),("0$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$311setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Undefined),("ipv4.srcAddr",Undefined)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("0$0if$10table:ipv4_lpm$10action:mydrop$11drop",NoMatch,Env [("drop",(Valid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("0$0if$10table:ipv4_lpm$10action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))]),("0$0else",NoMatch,Env [("drop",(Invalid,[])),("ipv4",(Invalid,[("ipv4.dstAddr",Invalid),("ipv4.srcAddr",Invalid)])),("ethernet",(Invalid,[("ethernet.field1",Invalid),("ethernet.field2",Invalid)]))])]

        describe "Modulok együttes tesztelései\n" $ do
            it "Elemzö, átalakító és ellenörzö folyamatok test1.p4 esetén" $ do
                parsConvsVerData1 `shouldBe` [("0$0table:ipv4_lpm$0action:ipv4_ch$1assignment:ethernet.srcAddr$101assignment:ethernet.dstAddr$201assignment:ipv4.ttl$301setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0table:ipv4_lpm$0action:mydrop$1drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("0$0table:ipv4_lpm$0action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))])]
            it "Elemzö, átalakító és ellenörzö folyamatok test2.p4 esetén" $ do
                parsConvsVerData2 `shouldBe` [("0$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$311setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$311setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0if$10table:ipv4_lpm$10action:mydrop$11drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:mydrop$11drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0if$10table:ipv4_lpm$10action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0else",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0else",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))])]
            it "Elemzö, átalakító és ellenörzö folyamatok test3.p4 esetén\n" $ do
                parsConvsVerData3 `shouldBe` [("0$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0if$10table:ipv4_lpm$10action:mydrop$11drop$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0if$10table:ipv4_lpm$10action:mydrop$11drop$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0if$10table:ipv4_lpm$10action:NoAction$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0if$10table:ipv4_lpm$10action:NoAction$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0else$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0else$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$100table:send_frame$100action:my_drop$101drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$100table:send_frame$100action:my_drop$101drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Valid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0if$10table:ipv4_lpm$10action:mydrop$11drop$100table:send_frame$100action:my_drop$101drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:mydrop$11drop$100table:send_frame$100action:my_drop$101drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Invalid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0if$10table:ipv4_lpm$10action:NoAction$100table:send_frame$100action:my_drop$101drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:NoAction$100table:send_frame$100action:my_drop$101drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Invalid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0else$100table:send_frame$100action:my_drop$101drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0else$100table:send_frame$100action:my_drop$101drop",NoMatch,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Invalid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))])]

            it "test1.p4 eredményeinek összehasonlítása" $ do
                compareCalculatedWithFinal (parsConvsVerData1) (snd (fst parsConvsData1)) `shouldBe` [("0$0table:ipv4_lpm$0action:ipv4_ch$1assignment:ethernet.srcAddr$101assignment:ethernet.dstAddr$201assignment:ipv4.ttl$301setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0table:ipv4_lpm$0action:mydrop$1drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("0$0table:ipv4_lpm$0action:NoAction",Match,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))])]
            it "test2.p4 eredményeinek összehasonlítása" $ do
                compareCalculatedWithFinal (parsConvsVerData2) (snd (fst parsConvsData2)) `shouldBe` [("0$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$311setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$311setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0if$10table:ipv4_lpm$10action:mydrop$11drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:mydrop$11drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0if$10table:ipv4_lpm$10action:NoAction",Match,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:NoAction",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0else",Match,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.ttl",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0else",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.ttl",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))])]
            it "test3.p4 eredményeinek összehasonlítása" $ do
                compareCalculatedWithFinal (parsConvsVerData3) (snd (fst parsConvsData3)) `shouldBe` [("0$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0if$10table:ipv4_lpm$10action:mydrop$11drop$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0if$10table:ipv4_lpm$10action:mydrop$11drop$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0if$10table:ipv4_lpm$10action:NoAction$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0if$10table:ipv4_lpm$10action:NoAction$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0else$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("1$0else$100table:send_frame$100action:rewrite_mac$101assignment:ethernet.srcAddr$201setHeader:ipv4",NoMatch,Env [("drop",(Invalid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]),("0$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$100table:send_frame$100action:my_drop$101drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:ipv4_ch$11assignment:ethernet.srcAddr$111assignment:ethernet.dstAddr$211assignment:ipv4.ttl$100table:send_frame$100action:my_drop$101drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Valid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0if$10table:ipv4_lpm$10action:mydrop$11drop$100table:send_frame$100action:my_drop$101drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:mydrop$11drop$100table:send_frame$100action:my_drop$101drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Invalid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0if$10table:ipv4_lpm$10action:NoAction$100table:send_frame$100action:my_drop$101drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0if$10table:ipv4_lpm$10action:NoAction$100table:send_frame$100action:my_drop$101drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Invalid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]),("0$0else$100table:send_frame$100action:my_drop$101drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Valid,[("ipv4.version",Valid),("ipv4.ihl",Valid),("ipv4.diffserv",Valid),("ipv4.totalLen",Valid),("ipv4.identification",Valid),("ipv4.flags",Valid),("ipv4.fragOffset",Valid),("ipv4.ttl",Valid),("ipv4.protocol",Valid),("ipv4.hdrChecksum",Valid),("ipv4.srcAddr",Valid),("ipv4.dstAddr",Valid)]))]),("1$0else$100table:send_frame$100action:my_drop$101drop",Match,Env [("drop",(Valid,[])),("ethernet",(Valid,[("ethernet.dstAddr",Valid),("ethernet.srcAddr",Valid),("ethernet.etherType",Valid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Invalid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))])]
------------------------------------- READING THE TEST FILES
inputfiles :: IO [String]
inputfiles = do
    file1 <- readFile "test1.p4"
    file2 <- readFile "test2.p4"
    file3 <- readFile "test3.p4"    
    file4 <- readFile "test4.p4"
    return (file1:file2:file3:file4:[])

files :: [String]
files = unsafePerformIO inputfiles

------------------------------------- EXAMPLE VARIABLES FOR PARSER TEST
parsed1 :: [Statement]
parsed1 = [ParserHeader "ethernet_t" [ParserField ("bit<48>","dstAddr"),ParserField ("bit<48>","srcAddr"),ParserField ("bit<16>","etherType")],ParserHeader "ipv4_t" [ParserField ("bit<8>","ttl"),ParserField ("bit<16>","hdrChecksum"),ParserField ("bit<32>","srcAddr"),ParserField ("bit<32>","dstAddr")],ParserStruct "headers" [StructField ("ethernet_t","ethernet"),StructField ("ipv4_t","ipv4")],Parser [State "start" (ParserSeq [Transition "parse_ethernet"]),State "parse_ethernet" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ethernet")),Transition "parse_ipv4"]),State "parse_ipv4" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ipv4")),Transition "accept"])],Control "MyIngress" [ParserAction "mydrop" (ParserSeq [ParserDrop]),ParserAction "ipv4_ch" (ParserSeq [ParserAssignment "hdr.ethernet.srcAddr" (NumConstant "2"),ParserAssignment "hdr.ethernet.dstAddr" (NumConstant "1"),ParserAssignment "hdr.ipv4.ttl" (NumConstant "20"),FuncExpr (SetInvalid (FuncVar "hdr.ipv4"))]),ParserTable "ipv4_lpm" (Keys [Semi "hdr.ipv4.dstAddr" "lpm"]) (Acts ["ipv4_ch","mydrop","NoAction"]),Apply (ParserSeq [FuncExpr (ApplyFunc (FuncVar "ipv4_lpm"))])],Control "MyDeparser" [Apply (ParserSeq [FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.ethernet")),FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.ipv4"))])]]

parsed2 :: [Statement]
parsed2 = [ParserHeader "ethernet_t" [ParserField ("bit<48>","dstAddr"),ParserField ("bit<48>","srcAddr"),ParserField ("bit<16>","etherType")],ParserHeader "ipv4_t" [ParserField ("bit<8>","ttl"),ParserField ("bit<16>","hdrChecksum"),ParserField ("bit<32>","srcAddr"),ParserField ("bit<32>","dstAddr")],ParserStruct "headers" [StructField ("ethernet_t","ethernet"),StructField ("ipv4_t","ipv4")],Parser [State "start" (ParserSeq [Transition "parse_ethernet"]),State "parse_ethernet" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ethernet")),TransitionSelect "hdr.ethernet.etherType" [Semi "ETHERTYPE_IPV4" "parse_ipv4",Semi "default" "accept"]]),State "parse_ipv4" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ipv4")),Transition "accept"])],Control "MyIngress" [ParserAction "mydrop" (ParserSeq [ParserDrop]),ParserAction "ipv4_ch" (ParserSeq [ParserAssignment "hdr.ethernet.srcAddr" (NumConstant "2"),ParserAssignment "hdr.ethernet.dstAddr" (NumConstant "1"),ParserAssignment "hdr.ipv4.ttl" (NumConstant "20"),FuncExpr (SetInvalid (FuncVar "hdr.ipv4"))]),ParserTable "ipv4_lpm" (Keys [Semi "hdr.ipv4.dstAddr" "lpm"]) (Acts ["ipv4_ch","mydrop","NoAction"]),Apply (ParserSeq [ParserIf (BoolExpr (IsValid (BoolVar "hdr.ipv4"))) (ParserSeq [FuncExpr (ApplyFunc (FuncVar "ipv4_lpm"))]) ParserSkip])],Control "MyDeparser" [Apply (ParserSeq [FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.ethernet")),FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.ipv4"))])]]

parsed3 :: [Statement]
parsed3 = [ParserHeader "ethernet_t" [ParserField ("bit<48>","dstAddr"),ParserField ("bit<48>","srcAddr"),ParserField ("bit<16>","etherType")],ParserHeader "ipv4_t" [ParserField ("bit<4>","version"),ParserField ("bit<4>","ihl"),ParserField ("bit<8>","diffserv"),ParserField ("bit<16>","totalLen"),ParserField ("bit<16>","identification"),ParserField ("bit<3>","flags"),ParserField ("bit<13>","fragOffset"),ParserField ("bit<8>","ttl"),ParserField ("bit<8>","protocol"),ParserField ("bit<16>","hdrChecksum"),ParserField ("bit<32>","srcAddr"),ParserField ("bit<32>","dstAddr")],ParserStruct "headers" [StructField ("ethernet_t","ethernet"),StructField ("ipv4_t","ipv4")],Parser [State "start" (ParserSeq [Transition "parse_ethernet"]),State "parse_ethernet" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ethernet")),TransitionSelect "hdr.ethernet.etherType" [Semi "ETHERTYPE_IPV4" "parse_ipv4",Semi "default" "accept"]]),State "parse_ipv4" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ipv4")),Transition "accept"])],Control "MyIngress" [ParserAction "mydrop" (ParserSeq [ParserDrop]),ParserAction "ipv4_ch" (ParserSeq [ParserAssignment "hdr.ethernet.srcAddr" (NumConstant "2"),ParserAssignment "hdr.ethernet.dstAddr" (NumConstant "1"),ParserAssignment "hdr.ipv4.ttl" (NumConstant "20")]),ParserTable "ipv4_lpm" (Keys [Semi "hdr.ipv4.dstAddr" "lpm"]) (Acts ["ipv4_ch","mydrop","NoAction"]),ParserAction "my_drop" (ParserSeq [ParserDrop]),ParserAction "rewrite_mac" (ParserSeq [ParserAssignment "hdr.ethernet.srcAddr" (NumConstant "3"),FuncExpr (SetInvalid (FuncVar "hdr.ipv4"))]),ParserTable "send_frame" (Keys [Semi "hdr.ethernet.dstAddr" "exact"]) (Acts ["rewrite_mac","my_drop"]),Apply (ParserSeq [ParserIf (BoolExpr (IsValid (BoolVar "hdr.ipv4"))) (ParserSeq [FuncExpr (ApplyFunc (FuncVar "ipv4_lpm"))]) ParserSkip,FuncExpr (ApplyFunc (FuncVar "send_frame"))])],Control "MyDeparser" [Apply (ParserSeq [FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.ethernet")),FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.ipv4"))])]]

parsed4 :: [Statement]
parsed4 = [Error]

------------------------------------- EXAMPLE VARIABLES FOR PREPARATION TEST
headerStatement :: [Statement]
headerStatement = [ParserHeader "ethernet_t" [ParserField ("bit<48>","dstAddr"),ParserField ("bit<48>","srcAddr"),ParserField ("bit<16>","etherType")],ParserHeader "ipv4_t" [ParserField ("bit<4>","version"),ParserField ("bit<4>","ihl"),ParserField ("bit<8>","diffserv"),ParserField ("bit<16>","totalLen"),ParserField ("bit<16>","identification"),ParserField ("bit<3>","flags"),ParserField ("bit<13>","fragOffset"),ParserField ("bit<8>","ttl"),ParserField ("bit<8>","protocol"),ParserField ("bit<16>","hdrChecksum"),ParserField ("bit<32>","srcAddr"),ParserField ("bit<32>","dstAddr")],ParserStruct "headers" [StructField ("ethernet_t","ethernet"),StructField ("ipv4_t","ipv4")]]

parserStatement :: Statement
parserStatement = Parser [State "start" (ParserSeq [Transition "parse_ethernet"]),State "parse_ethernet" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ethernet")),TransitionSelect "hdr.ethernet.etherType" [Semi "ETHERTYPE_IPV4" "parse_ipv4",Semi "default" "accept"]]),State "parse_ipv4" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ipv4")),Transition "accept"])]

parserWithoutStartStatement :: Statement
parserWithoutStartStatement = Parser [State "str" (ParserSeq [Transition "parse_ethernet"]),State "parse_ethernet" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ethernet")),TransitionSelect "hdr.ethernet.etherType" [Semi "ETHERTYPE_IPV4" "parse_ipv4",Semi "default" "accept"]]),State "parse_ipv4" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ipv4")),Transition "accept"])]

parserWithIncorrectHeaderStatement :: Statement
parserWithIncorrectHeaderStatement = Parser [State "start" (ParserSeq [Transition "parse_eth"]),State "parse_ethernet" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ethernet")),TransitionSelect "hdr.ethernet.etherType" [Semi "ETHERTYPE_IPV4" "parse_ipv4",Semi "default" "accept"]]),State "parse_ipv4" (ParserSeq [FuncExpr (Extract (FuncVar "packet") (FuncVar "hdr.ipv4")),Transition "accept"])]

controlStatement :: [Statement]
controlStatement = [ParserAction "mydrop" (ParserSeq [ParserDrop]),ParserAction "ipv4_ch" (ParserSeq [ParserAssignment "hdr.ethernet.srcAddr" (NumConstant "2"),ParserAssignment "hdr.ethernet.dstAddr" (NumConstant "1"),ParserAssignment "hdr.ipv4.ttl" (NumConstant "20"),FuncExpr (SetInvalid (FuncVar "hdr.ipv4"))]),ParserTable "ipv4_lpm" (Keys [Semi "hdr.ipv4.dstAddr" "lpm"]) (Acts ["ipv4_ch","mydrop","NoAction"]),ParserAction "my_drop" (ParserSeq [ParserDrop]),ParserAction "rewrite_mac" (ParserSeq [ParserAssignment "hdr.ethernet.srcAddr" (ArithVar "smac")]),ParserTable "send_frame" (Keys [Semi "hdr.ethernet.dstAddr" "exact"]) (Acts ["rewrite_mac","my_drop"]),Apply (ParserSeq [ParserIf (BoolExpr (IsValid (BoolVar "hdr.ipv4"))) (ParserSeq [FuncExpr (ApplyFunc (FuncVar "ipv4_lpm"))]) ParserSkip,FuncExpr (ApplyFunc (FuncVar "send_fram"))])]

emitStatement :: [Statement]
emitStatement = [FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.ethernet")),FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.ipv4"))]

emitWithIncorrectHeaderStatement :: [Statement]
emitWithIncorrectHeaderStatement  = [FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.net")),FuncExpr (Emit (FuncVar "packet") (FuncVar "hdr.ipv4"))]

testInitEnv :: [Environment]
testInitEnv = [Env [("drop",(Invalid, []))]]

testInitEnvFull :: [Environment]
testInitEnvFull = [Env [("drop",(Invalid,[])),("ethernet",(Invalid,[("ethernet.dstAddr",Invalid),("ethernet.srcAddr",Invalid),("ethernet.etherType",Invalid)])),("ipv4",(Invalid,[("ipv4.version",Invalid),("ipv4.ihl",Invalid),("ipv4.diffserv",Invalid),("ipv4.totalLen",Invalid),("ipv4.identification",Invalid),("ipv4.flags",Invalid),("ipv4.fragOffset",Invalid),("ipv4.ttl",Invalid),("ipv4.protocol",Invalid),("ipv4.hdrChecksum",Invalid),("ipv4.srcAddr",Invalid),("ipv4.dstAddr",Invalid)]))]]

testFinalEnvFull :: Environment
testFinalEnvFull = Env [("drop",(Invalid,[])),("ethernet",(Undefined,[("ethernet.dstAddr",Undefined),("ethernet.srcAddr",Undefined),("ethernet.etherType",Undefined)])),("ipv4",(Undefined,[("ipv4.version",Undefined),("ipv4.ihl",Undefined),("ipv4.diffserv",Undefined),("ipv4.totalLen",Undefined),("ipv4.identification",Undefined),("ipv4.flags",Undefined),("ipv4.fragOffset",Undefined),("ipv4.ttl",Undefined),("ipv4.protocol",Undefined),("ipv4.hdrChecksum",Undefined),("ipv4.srcAddr",Undefined),("ipv4.dstAddr",Undefined)]))]

testFinalEnv :: Environment
testFinalEnv = Env [("drop",(Invalid, []))]

testProg :: [Program]
testProg = []

testActions :: [Program]
testActions = []

testTables :: [Program]
testTables = []

testStrSideCons :: [String]
testStrSideCons = ["00&00&0000&00&000", "11&11&1111&11&111", "22&22&2222&22&222", "11&00&0201&21&120"] 

testStrIncorrectSideCons :: [String]
testStrIncorrectSideCons = ["0&0&000&00&000", "31&11&1113&11&111", "22&3&2222&22&222", "51&00&0201&21&120"] 

------------------------------------- EXAMPLE VARIABLES FOR VEFIFICATION TEST
testWithNonesSideCons :: SideCondition
testWithNonesSideCons = SideCon ([None, None], [None, None], [None, None, None, None], [None, None], [None, None, None])

testWithValidsSideCons :: SideCondition
testWithValidsSideCons = SideCon ([Valid, Valid], [Valid, Valid], [Valid, Valid, Valid, Valid], [Valid, Valid], [Valid, Valid, Valid])

testWithInvalidsSideCons :: SideCondition
testWithInvalidsSideCons = SideCon ([Invalid, Invalid], [Invalid, Invalid], [Invalid, Invalid, Invalid, Invalid], [Invalid, Invalid], [Invalid, Invalid, Invalid])

testIdEnv :: [IdEnvironment]
testIdEnv = [("0", Match, Env [("drop", (Invalid, [])), ("ipv4", (Invalid, [("ipv4.dstAddr", Invalid),("ipv4.srcAddr", Invalid)])), ("ethernet", (Invalid, [("ethernet.field1", Invalid),("ethernet.field2", Invalid)]))]),("1", NoMatch, Env [("drop", (Invalid, [])), ("ipv4", (Valid, [("ipv4.dstAddr", Valid),("ipv4.srcAddr", Valid)])), ("ethernet", (Valid, [("ethernet.field1", Valid),("ethernet.field2", Valid)]))])]

testActionsFull :: [Program]
testActionsFull = [Action "ipv4_ch" (Seq (Assignment "ethernet.srcAddr" []) (Seq (Assignment "ethernet.dstAddr" []) (Seq (Assignment "ipv4.ttl" []) (Seq (SetHeaderValidity "ipv4" Invalid) Skip)))),Action "mydrop" (Seq Drop Skip),Action "NoAction" Skip]

testProgFull :: Program
testProgFull = Seq (If ["ipv4.ttl"] (Seq (Table "ipv4_lpm" ["ipv4.dstAddr"] [Action "ipv4_ch" (Seq (Assignment "ethernet.srcAddr" []) (Seq (Assignment "ethernet.dstAddr" []) (Seq (Assignment "ipv4.ttl" []) (Seq (SetHeaderValidity "ipv4" Invalid) Skip)))),Action "mydrop" (Seq Drop Skip),Action "NoAction" Skip]) Skip) Skip) Skip

parsConvsData1 :: (([IdEnvironment], [Environment]), Program)
parsConvsData1 = mainConversion (parseString (files!!0)) ((testInitEnv, testFinalEnv), (testActions, testTables, testProg))

parsConvsData2 :: (([IdEnvironment], [Environment]), Program)
parsConvsData2 = mainConversion (parseString (files!!1)) ((testInitEnv, testFinalEnv), (testActions, testTables, testProg))

parsConvsData3 :: (([IdEnvironment], [Environment]), Program)
parsConvsData3 = mainConversion (parseString (files!!2)) ((testInitEnv, testFinalEnv), (testActions, testTables, testProg))

parsConvsVerData1 :: [IdEnvironment]
parsConvsVerData1 = checkP4 (fst (fst parsConvsData1)) (snd parsConvsData1) testWithNonesSideCons 0

parsConvsVerData2 :: [IdEnvironment]
parsConvsVerData2 = checkP4 (fst (fst parsConvsData2)) (snd parsConvsData2) testWithNonesSideCons 0

parsConvsVerData3 :: [IdEnvironment]
parsConvsVerData3 = checkP4 (fst (fst parsConvsData3)) (snd parsConvsData3) testWithNonesSideCons 0